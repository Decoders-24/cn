/* Implementation of Congestion control using leaky bucket algorithms.*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h> // For sleep function
#include <time.h>   // For time function

#define bucketSize 512

void bktInput(int pktSize, int op) {
    if (pktSize > bucketSize) {
        printf("\n\t\tBucket overflow");
    } else {
        sleep(2); // Simulate packet processing time
        while (pktSize > op) {
            printf("\n\t\t%d bytes outputted.", op);
            pktSize -= op;
            sleep(2); // Simulate transmission delay
        }
        if (pktSize > 0) {
            printf("\n\t\tLast %d bytes sent", pktSize);
        }
        printf("\n\t\tBucket output successful");
    }
}

int main() {
    int op, i;
    srand(time(NULL)); // Seed the random number generator

    printf("Enter output rate (bytes/second): ");
    scanf("%d", &op);

    for (i = 1; i <= 5; i++) {
        sleep(2); // Simulate interval between packets
        int pktSize = rand() % 1000; // Generate random packet size (0 to 999 bytes)
        printf("\nPacket no: %d \tPacket size: %d bytes", i, pktSize);
        bktInput(pktSize, op);
    }

    return 0;
}
