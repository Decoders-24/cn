/*Character Stuffing */
#include <stdio.h>
#include <string.h>

#define MAX_LENGTH 100

int main() {
    char source[MAX_LENGTH], char_stuff[MAX_LENGTH * 2], char_destuff[MAX_LENGTH];
    int i = 0, j = 0, k = 0;

    printf("Enter plain text: ");
    fgets(source, sizeof(source), stdin);
    source[strcspn(source, "\n")] = '\0'; // Remove newline character from input

    // Start with SYNC pattern at the beginning
    char_stuff[j++] = 'd';
    char_stuff[j++] = 'l';
    char_stuff[j++] = 'e';
    char_stuff[j++] = 's';
    char_stuff[j++] = 't';
    char_stuff[j++] = 'x';

    for (k = 0; k < strlen(source);) {
        // Check for DLE pattern in the source text
        if (source[k] == 'd' && source[k + 1] == 'l' && source[k + 2] == 'e') {
            // Append the DLE pattern twice in the stuffed text
            char_stuff[j++] = 'd';
            char_stuff[j++] = 'l';
            char_stuff[j++] = 'e';
            char_stuff[j++] = 'd';
            char_stuff[j++] = 'l';
            char_stuff[j++] = 'e';
            k += 3; // Skip the DLE pattern in the source
        } else {
            // Copy normal character from source to stuffed text
            char_stuff[j++] = source[k++];
        }
    }

    // End with SYNC pattern at the end
    char_stuff[j++] = 'd';
    char_stuff[j++] = 'l';
    char_stuff[j++] = 'e';
    char_stuff[j++] = 's';
    char_stuff[j++] = 't';
    char_stuff[j++] = 'x';
    char_stuff[j] = '\0'; // Null-terminate the stuffed text

    printf("After character stuffing:\n");
    puts(char_stuff);

    j = 0;
    for (i = 6; i < (strlen(char_stuff) - 6);) {
        // Check for DLE pattern in the stuffed text
        if (char_stuff[i] == 'd' && char_stuff[i + 1] == 'l' && char_stuff[i + 2] == 'e') {
            char_destuff[j++]='d';char_destuff[j++]='l';char_destuff[j++]='e';
            // Skip the doubled DLE pattern in the stuffed text
            i += 6;
        } else {
            // Copy normal character from stuffed text to destuffed text
            char_destuff[j++] = char_stuff[i++];
        }
    }
    char_destuff[j] = '\0'; // Null-terminate the destuffed text

    printf("\nAfter character de-stuffing:\n");
    puts(char_destuff);

    return 0;
}


